GitHub Actions

Introduction & Basic Concepts +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

A tool that lets you automate your software development workflows.

It allows you to react to some events that can happen in your repository or outside of your repository. And run a workflow in response to that event.

Workflows => They are configurable automate processed that you can set up in your repository in order to perform a certain task.
    - Tetsing your code.
    - Pybishing a package
    - Deploying an application
    - Sending a message to another platform such as Slack
    - Opening an Issue in GitHub

A workflow can have multiple steps. 
    - Events 
        - Repository Events: Push, Pull Request, Issue.
        - External Events: Sending a POST request to a REST API.
        - Scheduled Times
        - Manually
    - Worflow 
        - Job: Each Job run independent from each other, they usually run in their individual runner machine in parallel. 
            - Runner Machine
                - GitHub Hosted Runners (Windows/Linux/MacOS tools installed)
                - Self Hosted Runners (More responsibility/More customization)
                - Larger Runners (Hosted by GitHub with more RAM & CPU)
            - Steps
                - Action

In the root path, create a folder .github
Inside this one create another folder and name it workflows
there you can store all the yaml files


+++++ COMMANDS +++++
In the GitHub CLI one can run the following commands in order to enable or disable a Workflow
gh workflow w enale "First Workflow"
gh workflow w disable "Firt Workflow"

A Workflow running cannot be canceled


One can add Secrets and Variables in GitHub
Settings => Secrets and Variables => Actions
A SECRET has priority over a VARIABLE

For DEBUGGING add the following variables
    ACTIONS_RUNNER_DEBUG = true
    ACTIONS_STEP = true


++++ COMMANDS ++++
In order to SKIP a Workflow 
In the commit Message include [no ci] / [skip ci] / [ci skip] / [skip actions] / [actions skip]
git commit -am "Don't Run [skip ci]"

By default, the repository is not cloned into the Workflow Runner Machine.
For this you need to checkout the files to the runner machine. See checkout.yaml.

${{ secret.MYSECRET }} => way to call a secret into a command inside a yaml file



Events that trigger workflows ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In order to trigger a Workflow when having a pull-request. An approval will be required before launching the Workflow.

One can also use the repository in order to dispatch events for External events. 

Lecture 21 & 22 => How to use Postman to send external events

We can also schedule Workflows to be triggered at a certain time. Look for stale.yaml
Look for contab guru at google in order to use the cron parameter in the yaml file.
    5 fields => minute, hour, day (month), month, day(week)
    * any value
    , value list separator
    - range of values
    / step values
    0-6 allowed values
    SUN-SAT alternative single values
    ? sunday
    for example:
      1,2 * * * * => it means that it will be triggered at every 1 and 2 minutes of every hour, every day, every month. 
      1-3 * * * * => every 1, 2 and 3 minutes of every hour, every day, every month
      0/15 * * * * => from minute 0 and every 15 minutes of every hour, every day, every month
      0 12 1 1 * => at 12:00 every 1st of January
      0 13 * FEB 3 => at 13:00 every Wednesday of February 
    months and days of the week start at 0 being January and Sunday their respective 0



Expressions, contexts and functions ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

GitHub objects are also called context

YAML is NOT case sensitive.

The IF statement is gonna validate that the condition is true or false before continuing with the steps, that's the reason of declaring after the runs-on instruction.
If the condition is given as FALSE, then the rest of the steps will not be executed. 


Default Environment Variables
https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables

Even when we think that the context and the environment variables are the same, the way we talk about then is different.
Both are stored at the runner machina, however the way to access to both of them is different.
If we want to exponse it, the env var is the better approach. However, if we require it to make internal comparissons
or internal tasks at all, then the Context is a better approach. 
In other words:
When we are talking about ENV Variables => $GITHUB_REF
When we are talking about the Context => github_ref


When talking about SECRETS, the ones defined at repository level override the ones defined at organization level, 
this when the secrets have all the same name at both level.