name: Environment Variables

on: [push]

# WORKFLOW level
env: 
  WF_LEVEL_ENV: Available to all jobs and steps. 

# The context variables are always searched into the Runner Machine 
jobs: 
  env-vars-and-context: 
    runs-on: ubuntu-latest
    # env var, NOT recommended here
    # $GITHUB_REF == 'refs/head/main'
    # context
    if: github.ref == 'refs/heads/main'

    # JOB level
    env:
      JOB_LEVEL_ENV: Available to all steps in env-vars-and-context Job

    steps:
      - name: Log ENV VAR
        run: echo $GITHUB_REF

      - name: Log Context
        run: echo '${{ github.ref }}'
      
      # Example of a dynamic Env Var
      # Using the >> guarantees that the value is stored into another env_variable that is gonna be accessible for any 
      # further step in the workflow
      - name: Set Env Var
        run: |
          echo "NEW_ENV_VAR=$(date)" >> "$GITHUB_ENV"
          echo "JOB_LEVEL_ENV=$RANDOM" >> "$GITHUB_ENV"
      
      - name: Multiline Env Var
        # The DELIMITER, for security, has to be random always
        run: |
          DELIMITER=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "RANDOM_JOKE<<$DELIMITER" >> "$GITHUB_ENV" 
          echo "Here is a joke: " >> "$GITHUB_ENV"
          curl -s https://icanhazdadjoke.com/ >> "$GITHUB_ENV"
          echo "" >> "$GITHUB_ENV"
          echo "$DELIMITER" >> "$GITHUB_ENV"

      - name: Log Custom ENV VARS
        # STEP Level
        env: 
          STEP_LEVEL_ENV: Available to only this step
          # We can override ENV VARIABLES
          WF_LEVEL_ENV: Overriden in Step
        run: |
          echo '${{ env.STEP_LEVEL_ENV }}'
          echo $STEP_LEVEL_ENV
          echo $WF_LEVEL_ENV
          echo $JOB_LEVEL_ENV
          echo $NEW_ENV_VAR
          echo $RANDOM_JOKE